{"version":3,"sources":["lib/api.js","modules/noticeList.js","components/Loader.js","components/NotificationList.js","containers/NotificationListContainer.js","pages/NoticeListPage.js","components/NoticeViewer.js","lib/changeDataFormat.js","modules/noticeviewer.js","containers/NoticeViewerContainer.js","pages/NoticeViewerPage.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["getNoticeById","id","axios","get","GET_NOTICES","initialState","notices_loading","notices","notices_error","noticeList","state","action","type","noticesS_error","LoaderStyle","styled","div","Loader","Icon","loading","name","size","NotificationItemStyle","NotificationItem","title","className","NotificationList","map","notice","to","_id","NotificationListContainer","useSelector","dispatch","useDispatch","useEffect","a","data","console","error","NoticeListPageStyle","NoticeListPage","NoticeViewerTitleStyle","HTMLWrapper","NoticeViewer","received","html","log","updateAt","substring","dangerouslySetInnerHTML","__html","res","noticeviewer","NoticeViewerContainer","match","params","api","url","htmlString","getNoticeAndHTML","NoticeViewerPage","App","path","component","exact","Boolean","window","location","hostname","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.25891b0d.chunk.js","sourcesContent":["import axios from \"axios\";\nlet notificationBaseURL = `http://www.booreum.com:3001/v1/post`;\n\nexport const getNotificationsById = async (id) => {\n  return axios.get(`${notificationBaseURL}/${id}`);\n};\n\nexport const getNotices = () => {\n  return axios.get(`${notificationBaseURL}`);\n};\n\nexport const getNoticeById = (id) => {\n  return axios.get(`${notificationBaseURL}/${id}`);\n};\n\nexport const getHTMLStringFromURL = (url) => {\n  return axios.get(url);\n};\n","import * as api from \"../lib/api\";\n\nconst GET_NOTICES = \"noticetable/GET_NOTICES\";\nconst GET_NOTICES_SUCCESS = \"noticetable/GET_NOTICES_SUCCESS\";\nconst GET_NOTICES_FAILURE = \"noticetable/GET_NOTICES_FAILURE\";\n\nexport const getNoticesRequest = () => async (dispatch) => {\n  dispatch({ type: GET_NOTICES }); // 요청이 시작됨\n  try {\n    const notices = await api.getNotices(); // API 호출\n\n    dispatch({ type: GET_NOTICES_SUCCESS, notices: notices.data.data }); // 성공\n  } catch (e) {\n    console.error(e);\n    dispatch({ type: GET_NOTICES_FAILURE, notices_error: e }); // 실패\n  }\n};\n\nconst initialState = {\n  notices_loading: false,\n  notices: null,\n  notices_error: null,\n};\n\nfunction noticeList(state = initialState, action) {\n  switch (action.type) {\n    case GET_NOTICES:\n      return {\n        ...state,\n        notices_loading: true,\n      };\n\n    case GET_NOTICES_SUCCESS:\n      return {\n        ...state,\n        notices_loading: false,\n        notices: action.notices,\n      };\n\n    case GET_NOTICES_FAILURE:\n      return {\n        ...state,\n        notices_loading: false,\n        noticesS_error: action.notices_error,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default noticeList;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst LoaderStyle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 100;\n\n  width: 100vw;\n  height: 100vh;\n\n  background-color: rgba(0, 0, 0, 0.3);\n`;\n\nfunction Loader() {\n  return (\n    <LoaderStyle>\n      <Icon loading name=\"asterisk\" size=\"big\" />\n    </LoaderStyle>\n  );\n}\n\nexport default Loader;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst NotificationItemStyle = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  box-sizing: border-box;\n\n  width: 100vw;\n  height: 60px;\n\n  padding: 3px 15px;\n\n  border-bottom: 1px solid #cccccc;\n\n  .noti-title {\n    width: 94vw;\n\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n\n    font-size: 1.25rem;\n    color: black;\n  }\n`;\n\nfunction NotificationItem({ title }) {\n  return (\n    <NotificationItemStyle>\n      <div className=\"noti-title\">{title}</div>\n    </NotificationItemStyle>\n  );\n}\n\nfunction NotificationList({ notices }) {\n  return (\n    <div>\n      {notices &&\n        notices.map((notice) => (\n          <Link to={`/${notice._id}`}>\n            <NotificationItem title={notice.title} />\n          </Link>\n        ))}\n    </div>\n  );\n}\n\nexport default NotificationList;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getNoticesRequest } from \"../modules/noticeList\";\nimport Loader from \"../components/Loader\";\nimport NotificationList from \"../components/NotificationList\";\n\nfunction NotificationListContainer() {\n  const { notices_loading, notices, notices_error } = useSelector(\n    (state) => state.noticeList\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getNoticesRequest());\n  }, []);\n\n  if (notices_loading) {\n    return <Loader />;\n  }\n\n  if (notices_error) {\n    return (\n      <>\n        <div>에러가 발생했습니다</div>\n        <div>다시 실행해주세요.</div>\n      </>\n    );\n  }\n  return <NotificationList notices={notices} />;\n}\n\nexport default NotificationListContainer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport NotificationListContainer from \"../containers/NotificationListContainer\";\n\nconst NoticeListPageStyle = styled.div`\n  min-height: 100vh;\n`;\n\nfunction NoticeListPage() {\n  return (\n    <NoticeListPageStyle>\n      <NotificationListContainer />\n    </NoticeListPageStyle>\n  );\n}\n\nexport default NoticeListPage;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  changeFromDataFormat,\n  changeDataFormat,\n} from \"../lib/changeDataFormat\";\n\nconst NoticeViewerTitleStyle = styled.div`\n  font-weight: bold;\n  margin-bottom: 15px;\n\n  .title-wrapper {\n    display: flex;\n    justify-content: center;\n    font-size: 1.75rem;\n    margin-bottom: 25px;\n\n    line-height: 140%;\n  }\n\n  .date-wrapper {\n    display: flex;\n\n    padding-bottom: 5px;\n    border-bottom: 1px solid #cccccc;\n\n    font-size: 1.25rem;\n  }\n\n  .date {\n    margin-left: auto;\n  }\n`;\n\nconst HTMLWrapper = styled.div`\n  max-width: 100%;\n\n  .html-content {\n    line-height: 140% !important;\n    font-size: 1.5rem !important;\n\n    img {\n      max-width: 100% !important;\n    }\n  }\n`;\n\nfunction NoticeViewer({ notice, html }) {\n  useEffect(() => {\n    console.log(html);\n  }, []);\n  return (\n    <>\n      <NoticeViewerTitleStyle>\n        <div className=\"title-wrapper\">\n          <span>{notice && notice.title}</span>\n        </div>\n        <div className=\"date-wrapper\">\n          <span className=\"date\">{`게시: ${\n            notice && changeDataFormat(notice.updateAt)[0]\n          }`}</span>\n        </div>\n      </NoticeViewerTitleStyle>\n\n      <HTMLWrapper>\n        {html && (\n          <div\n            className=\"html-content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        )}\n      </HTMLWrapper>\n    </>\n  );\n}\n\nexport default NoticeViewer;\n","export const changeDataFormat = (received) => {\n  //2020-05-31T11:39:43.261Z\n  let date = received.substring(0, 10);\n  let time = received.substring(11, 16);\n\n  return [date, time];\n};\n","import * as api from \"../lib/api\";\n\nconst GET_NOTICE_AND_HTML = \"noticeviewer/GET_NOTICE_AND_HTML\";\nconst GET_NOTICE_AND_HTML_SUCCESS = \"noticeviewer/GET_NOTICE_AND_HTML_SUCCESS\";\nconst GET_NOTICE_AND_HTML_FAILURE = \"noticeviewer/GET_NOTICE_AND_HTML_FAILURE\";\n\nexport const getNoticeAndHTML = (id) => async (dispatch) => {\n  dispatch({ type: GET_NOTICE_AND_HTML });\n  try {\n    const notice = await api.getNoticeById(id);\n    console.log(notice.data.data.html);\n    const htmlString = await api.getHTMLStringFromURL(notice.data.data.html);\n    console.log(htmlString);\n    dispatch({\n      type: GET_NOTICE_AND_HTML_SUCCESS,\n      html: htmlString.data,\n      notice: notice.data.data,\n    });\n  } catch (e) {\n    console.log(e);\n    dispatch({ type: GET_NOTICE_AND_HTML_FAILURE, error: e });\n  }\n};\n\nconst initialState = {\n  notice: null,\n  html: null,\n  loading: false,\n  error: null,\n  res: null,\n};\n\nfunction noticeviewer(state = initialState, action) {\n  switch (action.type) {\n    case GET_NOTICE_AND_HTML:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GET_NOTICE_AND_HTML_SUCCESS:\n      return {\n        ...state,\n        notice: action.notice,\n        html: action.html,\n        loading: false,\n      };\n    case GET_NOTICE_AND_HTML_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default noticeviewer;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport Loader from \"../components/Loader\";\nimport NoticeViewer from \"../components/NoticeViewer\";\n\nimport { getNoticeAndHTML } from \"../modules/noticeviewer\";\nfunction NoticeViewerContainer({ match }) {\n  const { id } = match.params;\n  const { notice, html, loading, error } = useSelector(\n    (state) => state.noticeviewer\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log(id);\n    dispatch(getNoticeAndHTML(id));\n  }, []);\n\n  if (!notice) {\n    return <div>NOT FOUND!</div>;\n  }\n\n  if (error) {\n    return <div>에러가 발생했습니다. 잠시 기다렸다 새로고침 해주세요.</div>;\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  if (notice) {\n    return <NoticeViewer notice={notice} html={html} />;\n  }\n}\n\nexport default NoticeViewerContainer;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport NoticeViewerContainer from \"../containers/NoticeViewerContainer\";\n\nconst NoticeListPageStyle = styled.div`\n  min-height: 100vh;\n  padding: 20px 30px;\n`;\n\nfunction NoticeViewerPage({ match }) {\n  return (\n    <NoticeListPageStyle>\n      <NoticeViewerContainer match={match} />\n    </NoticeListPageStyle>\n  );\n}\n\nexport default NoticeViewerPage;\n","import React from \"react\";\nimport NoticeListPage from \"./pages/NoticeListPage\";\nimport { Route } from \"react-router\";\nimport NoticeViewerPage from \"./pages/NoticeViewerPage\";\n\nfunction App() {\n  return (\n    <>\n      <Route path=\"/\" component={NoticeListPage} exact />\n      <Route path=\"/:id\" component={NoticeViewerPage} exact />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport noticeList from \"./noticeList\";\nimport noticeviewer from \"./noticeviewer\";\n\nconst rootReducer = combineReducers({\n  noticeList,\n  noticeviewer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./modules\";\nimport ReduxThunk from \"redux-thunk\";\nimport { BrowserRouter } from \"react-router-dom\"; // * BrowserRouter 불러오기\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(ReduxThunk))\n); // 여러개의 미들웨어를 적용 할 수 있습니다.\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}